#!/usr/bin/python3
################################
###### iDigitalFlame 2018 ######
#                              #
#            -/`               #
#            -yy-   :/`        #
#         ./-shho`:so`         #
#    .:- /syhhhh//hhs` `-`     #
#   :ys-:shhhhhhshhhh.:o- `    #
#   /yhsoshhhhhhhhhhhyho`:/.   #
#   `:yhyshhhhhhhhhhhhhh+hd:   #
#     :yssyhhhhhyhhhhhhhhdd:   #
#    .:.oyshhhyyyhhhhhhddd:    #
#    :o+hhhhhyssyhhdddmmd-     #
#     .+yhhhhyssshdmmddo.      #
#       `///yyysshd++`         #
#                              #
########## SPACEPORT ###########
################################
## Goreturns wrapper
# iDigitalFlame 2018

from os import environ
from os.path import join
from sys import argv, exit
from subprocess import Popen, PIPE

if __name__ == "__main__":
    if len(argv) == 1:
        exit(1)
    try:
        goCommand = Popen(
            [join(environ["HOME"], ".local/lib/go/bin/goreturns.orig")] + argv[1:],
            stdout=PIPE,
            stderr=PIPE,
        )
        while goCommand.poll() is None:
            pass
        goOutputStd = goCommand.stdout.read().decode("UTF-8")
        goOutputError = goCommand.stderr.read().decode("UTF-8")
        if len(goOutputError) > 0:
            print(goOutputError, end="")
            exit(1)
        goOutputLen = len(goOutputStd)
        if goOutputLen <= 2:
            print(goOutputLen, end="")
        else:
            if goOutputStd[goOutputLen - 1] == "\n":
                if goOutputStd[goOutputLen - 2] == "\r":
                    print(goOutputStd[: goOutputLen - 2], end="")
                else:
                    print(goOutputStd[: goOutputLen - 1], end="")
            else:
                print(goOutputStd, end="")
    except IOError as err:
        print('Could not get output from "goreturns"! (%s)' % str(err))
        exit(1)
    exit(0)

# EOF
