#!/usr/bin/bash
################################
### iDigitalFlame  2016-2024 ###
#                              #
#            -/`               #
#            -yy-   :/`        #
#         ./-shho`:so`         #
#    .:- /syhhhh//hhs` `-`     #
#   :ys-:shhhhhhshhhh.:o- `    #
#   /yhsoshhhhhhhhhhhyho`:/.   #
#   `:yhyshhhhhhhhhhhhhh+hd:   #
#     :yssyhhhhhyhhhhhhhhdd:   #
#    .:.oyshhhyyyhhhhhhddd:    #
#    :o+hhhhhyssyhhdddmmd-     #
#     .+yhhhhyssshdmmddo.      #
#       `///yyysshd++`         #
#                              #
########## SPACEPORT ###########
## SMB Connecter with Keyring Integration
#
# Copyright (C) 2016 - 2024 iDigitalFlame
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

# Enable Strict Mode
set -u

if [ $# -lt 2 ] || [ $# -gt 3 ]; then
    echo 'smb [--reset] <domain\user|user> <share>'
    exit 1
fi

if [ $# -eq 3 ] && [ "$1" = "--reset" ]; then
    user="$2"
    share="$3"
    keyring="smb-$(echo "$2" | sed -e 's/\\/-/g' | sed -e 's/@/-/g')"
    secret-tool clear name "$keyring"
else
    if [ $# -eq 2 ]; then
        user="$1"
        share="$2"
        keyring="smb-$(echo "$1" | sed -e 's/\\/-/g' | sed -e 's/@/-/g')"
    else
        echo 'smb [--reset] <domain\user|user> <share>'
        exit 1
    fi
fi

domain=""
if echo "$user" | grep -q '\\'; then
    domain=$(echo "$user" | awk -F'\' '{print $1}')
    user=$(echo "$user" | awk -F'\' '{print $2}')
else
    if echo "$user" | grep -q "@"; then
        domain=$(echo "$user" | awk -F'@' '{print $2}')
        user=$(echo "$user" | awk -F'@' '{print $1}')
    fi
fi

share=$(echo "$share" | sed -e 's/^\\\\//g' | sed -e 's/^\\//g' | sed -e 's/^\/\///g' | sed -e 's/^\///g'  | sed -e 's/\\/\//g')
if ! echo "$share" | grep -q "/"; then
    printf 'Invalid share path "%s"!\n' "$share"
    exit 1
fi

server=$(echo "$share" | awk -F'/' '{print $1}')
folder=$(echo "$share" | sed -e "s/^$server\///g")
if [[ -z $folder ]] || [[ -z $server ]]; then
    printf 'Invalid share path "%s"!\n' "$share"
    exit 1
fi

base=$(echo "$folder" | awk -F'/' '{ print $1 }')
escaped=$(echo "$base" | sed -e 's/\$/\\$/g')
if mount | grep "$server" | grep -q "$escaped"; then
    printf 'Share "%s" on "%s" seems to already be mounted!\n' "$folder" "$server"
    exit 1
fi

save=0
password=$(secret-tool lookup name "$keyring" 2> /dev/null)
while [ -z "$password" ]; do
    save=1
    printf "Password for %s@%s: " "$user" "$server"
    read -r -s password
    printf "\n"
done

if [ $save -eq 1 ]; then
    printf "%s" "$password" | secret-tool store --label="$keyring" name "$keyring"
fi

path="/tmp/.mounts/${USER}/${server}-$(echo "$base" | sed -e 's/\$//g')"
prefix=$(echo "$folder" | awk -F'/' '{ ORS=""; for(i=2;i<=NF;i++) print $i"/" }'|sed -e 's/\/*$//g'|sed -e 's/\/\/*/\//g')

if ! mkdir -p "$path" 2> /dev/null; then
    printf 'Could not create directory "%s"!\n' "$path"
    exit 1
fi

printf "%s\b%s\b%s\b%s\n" "$user" "$domain" "$password" "$USER" | sudo "/usr/lib/smd/sbin/smb" "${server}/${base}/${prefix}" "$path"
result=$?

user=""
domain=""
password=""

if [ $result -ne 0 ]; then
    rmdir "$path"
    echo "Error occured during mount operation!"
    exit 1
fi

printf 'Mounted "%s" to "%s"!\n' "${server}/${folder}" "$path"
exit 0
