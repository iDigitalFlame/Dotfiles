#!/usr/bin/python3
################################
### iDigitalFlame  2016-2022 ###
#                              #
#            -/`               #
#            -yy-   :/`        #
#         ./-shho`:so`         #
#    .:- /syhhhh//hhs` `-`     #
#   :ys-:shhhhhhshhhh.:o- `    #
#   /yhsoshhhhhhhhhhhyho`:/.   #
#   `:yhyshhhhhhhhhhhhhh+hd:   #
#     :yssyhhhhhyhhhhhhhhdd:   #
#    .:.oyshhhyyyhhhhhhddd:    #
#    :o+hhhhhyssyhhdddmmd-     #
#     .+yhhhhyssshdmmddo.      #
#       `///yyysshd++`         #
#                              #
########## SPACEPORT ###########
################################
## New Workspace
#
# Copyright (C) 2016 - 2022 iDigitalFlame
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

from sys import exit, argv, stderr
from json import loads, JSONDecodeError
from subprocess import Popen, PIPE, DEVNULL


def run(cmd):
    params = cmd
    if not isinstance(cmd, list):
        params = str(cmd).split(" ")
    try:
        x = Popen(["/usr/bin/i3-msg"] + params, stdout=PIPE, stderr=DEVNULL)
        if x.wait() != 0:
            raise OSError('"i3-msg" returned non-zero status!')
        o = x.stdout.read()
        if len(o) > 0:
            try:
                return loads(o.decode("UTF-8"))
            except JSONDecodeError as err:
                raise ValueError(f'"i3-msg" output was not in JSON format: {err}')
            except UnicodeDecodeError as err:
                raise ValueError(f'"i3-msg" could not be decoded: {err}')
        return None
    except OSError as err:
        raise OSError('Command to "i3-msg" failed: %s' % str(err))


def run_cmd(cmd):
    return run(["-t", cmd])


def focused(parent=None):
    if parent is None:
        parent = run_cmd("get_tree")
    if parent is not None and "nodes" in parent:
        for n in parent["nodes"]:
            if "type" in n and n["type"] == "con":
                if (
                    "name" in n
                    and n["name"] is not None
                    and "focused" in n
                    and n["focused"]
                    and "id" in n
                ):
                    return n["id"]
            if "type" in n and "nodes" in n:
                r = focused(n)
                if r is not None:
                    return r
    return None


if __name__ == "__main__":
    c = None
    if len(argv) > 1:
        c = focused()
    try:
        ws = run_cmd("get_workspaces")
    except Exception as err:
        print(f"Error: {err}", file=stderr)
        exit(1)
    if ws is None:
        print('"i3-msg" did not return any valid workspaces!', file=stderr)
        exit(1)
    e = next(x for x in range(1, 50) if not [w for w in ws if w["num"] == x])
    del ws
    try:
        if c is not None:
            run(
                [
                    f'[con_id="{c}"]',
                    "move",
                    "container",
                    "to",
                    "workspace",
                    str(e),
                ]
            )
        if c is None or len(argv) > 2:
            run(["workspace", str(e)])
        del e
    except Exception as err:
        print(f"Error: {err}", file=stderr)
        exit(1)
    exit(0)
