#!/usr/bin/python3
################################
### iDigitalFlame  2016-2021 ###
#                              #
#            -/`               #
#            -yy-   :/`        #
#         ./-shho`:so`         #
#    .:- /syhhhh//hhs` `-`     #
#   :ys-:shhhhhhshhhh.:o- `    #
#   /yhsoshhhhhhhhhhhyho`:/.   #
#   `:yhyshhhhhhhhhhhhhh+hd:   #
#     :yssyhhhhhyhhhhhhhhdd:   #
#    .:.oyshhhyyyhhhhhhddd:    #
#    :o+hhhhhyssyhhdddmmd-     #
#     .+yhhhhyssshdmmddo.      #
#       `///yyysshd++`         #
#                              #
########## SPACEPORT ###########
################################
## Sticky Note Creator
#
# Copyright (C) 2016 - 2021 iDigitalFlame
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

from html import escape
from random import choice
from os.path import isfile
from datetime import datetime
from string import ascii_lowercase
from subprocess import Popen, DEVNULL
from sys import argv, exit, stderr, stdin
from evernote.edam.type.ttypes import Note
from evernote.api.client import EvernoteClient
from os import fork, makedirs, environ, getpid, remove

TOKEN_FILE = ".config/note.conf"


def _main():
    if len(argv) == 2 and argv[1] == "-":
        try:
            take_note_stdin()
        except Exception as err:
            print(f"Error taking note: {err}!", file=stderr)
            return 1
        return 0
    try:
        if fork() > 0:
            return 0
        try:
            take_note()
        except Exception as err:
            print(f"Error taking note: {err}!", file=stderr)
            return 1
        return 0
    except OSError as err:
        print(f"Could not fork: {err}!", file=stderr)
    return 2


def take_note():
    h = environ["HOME"]
    if not isinstance(h, str) or len(h) == 0:
        raise ValueError("Could not get a proper $HOME value")
    makedirs(f"{h}/.cache/notes", mode=0o750, exist_ok=True)
    i = f"{h}/.cache/notes/{getpid()}-{''.join([choice(ascii_lowercase) for _ in range(8)])}.txt"
    p = Popen(
        ["/usr/bin/leafpad", "--class=stickynote", i],
        stdout=DEVNULL,
        stderr=DEVNULL,
    )
    if p.wait() > 0:
        print("Warning: Leafpad exited with a non-zero status!", file=stderr)
    del p
    if not isfile(i):
        return
    with open(i, "r") as f:
        d = f.read()
    if not isinstance(d, str) or len(d.strip()) == 0:
        remove(i)
        del i
        return
    if not _submit(h, d):
        del i
        del h
        del d
        return
    del h
    del d
    remove(i)
    del i


def take_note_stdin():
    if stdin.isatty():
        return
    h = environ["HOME"]
    if not isinstance(h, str) or len(h) == 0:
        raise ValueError("Could not get a proper $HOME value")
    d = stdin.read()
    if not isinstance(d, str) or len(d.strip()) == 0:
        return
    _submit(h, d)
    del d
    del h


def _submit(home, note_text):
    if not isinstance(home, str) or len(home) == 0:
        raise ValueError("Could not get a proper $HOME value")
    if not isinstance(note_text, str) or len(note_text.strip()) == 0:
        return False
    p = f"{home}/{TOKEN_FILE}"
    if not isfile(p):
        del p
        return False
    with open(p, "r") as f:
        t = f.read().replace("\n", "").strip()
    del p
    if not isinstance(t, str) or len(t) == 0:
        return False
    d = (
        escape(note_text)
        .replace("\t", "    ")
        .replace("\n", "<br/>")
        .replace("\r", "<br/>")
    )
    n = Note()
    n.title = f'Scratch Pad {datetime.now().strftime("%m/%d/%Y %H:%M")}'
    n.content = (
        '<?xml version="1.0" encoding="UTF-8"?>'
        '<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd">'
        f"<en-note><code>{d}</code></en-note>"
    )
    del d
    if n.validate() is not None:
        return False
    s = EvernoteClient(token=t, sandbox=False).get_note_store()
    s.createNote(n)
    del n
    del s
    del t
    return True


if __name__ == "__main__":
    exit(_main())
