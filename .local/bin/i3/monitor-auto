#!/usr/bin/bash
################################
###### iDigitalFlame 2020 ######
#                              #
#            -/`               #
#            -yy-   :/`        #
#         ./-shho`:so`         #
#    .:- /syhhhh//hhs` `-`     #
#   :ys-:shhhhhhshhhh.:o- `    #
#   /yhsoshhhhhhhhhhhyho`:/.   #
#   `:yhyshhhhhhhhhhhhhh+hd:   #
#     :yssyhhhhhyhhhhhhhhdd:   #
#    .:.oyshhhyyyhhhhhhddd:    #
#    :o+hhhhhyssyhhdddmmd-     #
#     .+yhhhhyssshdmmddo.      #
#       `///yyysshd++`         #
#                              #
########## SPACEPORT ###########
################################
## Auto Monitor
#
# Copyright (C) 2020 iDigitalFlame
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

monitor="eDP1"
monitor_list=$(/usr/bin/xrandr | grep -E ' connected' | awk '{print $1}' | grep -v $monitor)
if [ ! -z "$monitor_list" ]; then
    monitor_pos=0
    monitor_num=0
    monitor_mode=0
    monitor_command="/usr/bin/xrandr"
    if [[ $# -eq 1 ]] && [[ "$1" == "-r" ]]; then
        monitor_mode=1
    fi
    if [[ $# -eq 1 ]] && [[ "$1" == "-s" ]]; then
        monitor_mode=2
    fi
    if [ $monitor_mode -eq 1 ]; then
        for selected_monitor in $monitor_list; do
            monitor_command="$monitor_command --output $selected_monitor --mode 1920x1080 --pos $((1920*$monitor_num))x0 --rotate normal"
            if [ $monitor_mode -ne 2 ]; then
                monitor_num=$(($monitor_num + 1))
            fi
        done
        if [ $monitor_mode -eq 2 ]; then
            $monitor_num=1
        fi
        monitor_command="$monitor_command --output $monitor --primary --mode 1920x1080 --pos $((1920*$monitor_num))x0 --rotate normal"
    else
        monitor_command="$monitor_command --output $monitor --primary --mode 1920x1080 --pos $((1920*$monitor_num))x0 --rotate normal"
        monitor_num=1
        for selected_monitor in $monitor_list; do
            monitor_command="$monitor_command --output $selected_monitor --mode 1920x1080 --pos $((1920*$monitor_num))x0 --rotate normal"
            if [ $monitor_mode -ne 2 ]; then
                monitor_num=$(($monitor_num + 1))
            fi
        done
    fi
    eval "$monitor_command"
    /usr/lib/smd/libexec/smd-video
fi
exit 0
