#!/usr/bin/python3
################################
###### iDigitalFlame 2018 ######
#                              #
#            -/`               #
#            -yy-   :/`        #
#         ./-shho`:so`         #
#    .:- /syhhhh//hhs` `-`     #
#   :ys-:shhhhhhshhhh.:o- `    #
#   /yhsoshhhhhhhhhhhyho`:/.   #
#   `:yhyshhhhhhhhhhhhhh+hd:   #
#     :yssyhhhhhyhhhhhhhhdd:   #
#    .:.oyshhhyyyhhhhhhddd:    #
#    :o+hhhhhyssyhhdddmmd-     #
#     .+yhhhhyssshdmmddo.      #
#       `///yyysshd++`         #
#                              #
########## SPACEPORT ###########
################################
## New
# Commands i3 to find the next empy workspace and move the focused window to it.
# Updated 06/05/2018


import sys

from json import loads, JSONDecodeError
from subprocess import Popen, PIPE, DEVNULL


def i3_command(i3_type):
    return i3_output(['-t', i3_type])


def i3_output(i3_command):
    i3_exec_params = i3_command
    if not isinstance(i3_command, list):
        i3_exec_params = str(i3_command).split(' ')
    try:
        i3_exec = Popen(['/usr/bin/i3-msg'] + i3_exec_params, stdout=PIPE, stderr=DEVNULL)
        if i3_exec.wait() != 0:
            print('[!] "i3-msg" returned non-zero status!')
            sys.exit(1)
        i3_output = i3_exec.stdout.read()
        if len(i3_output) > 0:
            try:
                i3_json = loads(i3_output.decode('UTF-8'))
                return i3_json
            except JSONDecodeError as err:
                print('[!] "i3-msg" output was not in JSON format! (%s)' % str(err))
                sys.exit(1)
            except UnicodeDecodeError as err:
                print('[!] "i3-msg" could not be decoded! (%s)' % str(err))
                sys.exit(1)
        return None
    except OSError as err:
        print('[!] Command to "i3-msg" failed! (%s)' % str(err))
        sys.exit(1)


def i3_get_focused(i3_node=None):
    if i3_node is None:
        i3_node = i3_command('get_tree')
    if i3_node is not None and 'nodes' in i3_node:
        for node in i3_node['nodes']:
            if 'type' in node and node['type'] == 'con':
                if 'name' in node and node['name'] is not None and 'focused' in node and node['focused']:
                    if 'id' in node:
                        return node['id']
            if 'type' in node and 'nodes' in node:
                node_result = i3_get_focused(node)
                if node_result is not None:
                    return node_result
    return None


if __name__ == '__main__':
    i3_focused = i3_get_focused()
    i3_workspaces = i3_command('get_workspaces')
    if i3_workspaces is not None and i3_focused is not None:
        i3_next_empty = next(x for x in range(1, 50) if not [w for w in i3_workspaces if w['num'] == x])
        i3_output(['[con_id="%s"]' % i3_focused, 'move', 'container', 'to', 'workspace', str(i3_next_empty)])
        if len(sys.argv) > 1:
            i3_output(['workspace', str(i3_next_empty)])
        sys.exit(0)
    sys.exit(1)

# EOF